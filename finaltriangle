# -*- coding: utf-8 -*-
"""
Created on Tue May 25 20:11:13 2021

@author: ART7
"""

import matplotlib.pyplot as plt
import numpy as np
import shapely.geometry
import copy
## ebteda polygon vorodi ra vared mikonim
polygon=[[2361.9771,1048.9401],[2416.6060,1147.4432],[2580.4924,1232.8916],[2818.0090,1232.8916],[3003.2719,1161.6846],[2915.3908,1021.6441],[2780.0063,962.3049],[2578.1172,962.3049],[2399.9798,1007.4027],[2361.9771,1048.9401]]

# polygon=[[100,100],[102,98],[104,96],[106,94],[108,92],[110,90],[109,22],[116,-20],[96,-10],[98,0],[90,12],[80,20],[84,25],[80,30],[90,40],[94,55],[106,60],[100,64],[90,80],[100,100]]
## class ra tarif mikonim ke dar an polygon ra vorodi migira
class Trianglution_mono():
    def __init__(self,polygon):
        self.polygon=polygon
## in tabe baraye rasm polygon estefade mishVAD 
## dar polygon peymayesh mikonad 
## be ezaye har vertex x va y an ra joda dar nazar migirad list az an ha dar nazar migirad  va dar nahayat an ra rasm mikonad        
    def plot_polygone(self): 
        x = []
        y = []
        for VERTEX in self.polygon:
            x.append (VERTEX[0]) 
            y.append (VERTEX[1])
            plt.plot(VERTEX[0],VERTEX[1],'ro')
        plt.plot(x,y,'g-',linewidth = '2.5')
## in tabe polygon daryafti ra be polygon ke be sorat list nist tabdil mikonad        
    def geometry_polygon(self):
        geo_polygon= shapely.geometry.Polygon(polygon) 
        return geo_polygon
## dar in tabe  Q ra tashkil midahim
        ## ebteda az copy list polygon sort mikonim ke chon sharti bar roye an nist faghat az kochak be bozorg x moratab mikonad
        ## sepas be do entaha tekrari ra hazf mikonad
        ## sepas in list ra bar asas nozoli y moratab mikonad
        ## dar nahayat Q ra bar migardanad
    def create_Q(self,polygon_copy):
        polygon_copy.sort()
        res = []
        for i in polygon_copy:
            if i not in res:
                res.append(i)
        polygon_copy=res
        polygon_copy.sort(key=lambda item:item[1] , reverse=True)
        Q=polygon_copy
        return(Q)
## in tabe baresi mikonad ke aya do vertex ke be an dade mishvad dar yek chain hastand ya na
## bararye in ke dar yek chain bashan aghr yek vertex ghabl va baed bashad ast be joz mavarad entehaee ke an ham moshkel be vogod nemiavarad chone yal bein an ha ast        
    def same_chain(self,idx_node1,idx_node2):
        dif_idx=abs(idx_node1-idx_node2)
        if dif_idx==1 or dif_idx==len(polygon)-2:
            return True
        else:
            return False
## in tabe main barname astt va mosalas bandi ra anjam midad
            ## 1 ebteda yek copy az poygon ejad mikonad ke taghirat roye opolygon asli be vogod nayad
            ## 2 sepas be komak tabe create Q Q ra tashkil midahim
            ## sepes item aval va dovom Q ra dar stak gharar midahim
    def triangulation(self):
        polygon1=copy.deepcopy(self.polygon)
        Q=self.create_Q(polygon1)
        stack=[]
        diagonals=[]
        ## initials stack
        U1=Q[0]
        U2=Q[1]
        stack.append(U1)
        stack.append(U2)
## dar in ghesmat ebeteda ba yek haklghe for dar Q harekat mikonim
        ##2 onsor j om ra uj dar nazar migirim haman onsori ke beyad be baghie vasl shavad
        ##3 sepas index in item ra dar polygon asli be dast miarim
        ##4 sepas index raes enesi ke dar stack hast ra be dast miarim
        ## 5 baresi mikonim ke aya dar yek chain hastan ya na ke ba tavago be an do rahe hal dari,
        for j in range(2,len(Q)):
            uj=Q[j]
            sl = self.polygon.index(stack[len(stack)-1])
            uj_index =self. polygon.index(uj)
            geo_polygon=self.geometry_polygon()
            if self.same_chain(sl,uj_index):
## agar dar yek chain bashand ta yek jaee mishavad ghotr tarsim kard
                ## ebeteda akharin item stack ra dar yek moteghaier zakhire mikonim
                ## 2 va akharin item ra az stack hazf mikonim
                last_vertex = stack[len(stack)-1] 
                del(stack[len(stack)-1])
## be sorat barax roye stack harekat mikonim
                ## 2 ghotr uj va enekas ra dar nazar migim
                ## 3 agar ke eshterak ghot ba polygon ma haman kaht ghot basha yani ghotr biron polygon nist
                for enekas_vertex in stack[::-1]: 
                    d = [uj,enekas_vertex]  
                    line = shapely.geometry.LineString(d) 
                    intersection=geo_polygon.intersection(line)
#                    print("intersection")
#                    print(intersection)
                    if intersection == line:  
                        ## 4 pas akharin vertex be an vertex taghir mikonad
                        ## 5 ghabli ra az satack hazf mikonim
                        last_vertex = enekas_vertex
                        del(stack[len(stack)-1])
## 6 ghotr ra be diagonal ezafe mikonim
                        diagonals.append(d)
                        print("diagonals") 
                        print(diagonals)
                        
                    else:
                        break
                stack.append(last_vertex)
                stack.append(uj) 
#                print("new stack")
#                print(stack)
## agar ke dar yek chain nabashand
            else:
             ## 1 dar in ghesmat tamam enekas vertex ra be uj be onvan ghot dar nazar migirim be joz avali
                for enekas_vertex in stack[1:]:
            ## 2 ghotr uj va enekas ra dar nazar migim
                    d=[uj,enekas_vertex]
                    diagonals.append(d)
            ## 3 tamam vertex haye enkasi ra be joz avli az stack hazf mikonim
            ## hamchnin uj ham be stack ezafe mikonim chon az an ja be baed mosalas bandi nashode ast
                del(stack[:-1])
                stack.append(uj)           
        return diagonals
## in tabe ghotr ha ra be tatib mikeshad           
    def plot_digonals(self):
        diagonals=self.triangulation()
        print(diagonals)
        plt.clf()
        for d in diagonals:
            self.plot_polygone()
            xs = [d[0][0],d[1][0]]
            ys= [d[0][1],d[1][1]]
            plt.plot(xs,ys,ls = ':',linewidth = '1.5')
            plt.pause(0.1)	  
##------------------- in gesmat classs v atabe ha ra farakhani mikonad  ##-------------------                           
t1=Trianglution_mono(polygon)    
#t1.plot_polygone()
print(t1.geometry_polygon())
polygon1=copy.deepcopy(polygon)
Q=t1.create_Q(polygon1)
print("Q:------------------------->")
print(Q)
print("size is:---------------------------->")
print(len(polygon))
print(t1.same_chain(2,20))
print('triangulation')
print(t1.triangulation())
t1.plot_digonals()
plt.show()


